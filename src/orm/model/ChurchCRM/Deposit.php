<?php

namespace ChurchCRM;

use ChurchCRM\Base\Deposit as BaseDeposit;
use Propel\Runtime\ActiveQuery\Criteria;
use ChurchCRM\PledgeQuery as ChildPledgeQuery;
use net\authorize\api\contract\v1 as AnetAPI;
use net\authorize\api\controller as AnetController;

/**
 * Skeleton subclass for representing a row from the 'deposit_dep' table.
 *
 *
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 */
class Deposit extends BaseDeposit
{
  
  public function getOFX()
  {
    $OFXReturn = new \stdClass();
    if ( $this->getPledges()->count() == 0 ) {
      throw new Exception("No Payments on this Deposit",404);
    }

    $orgName = "ChurchCRM Deposit Data";
    $OFXReturn->content = "OFXHEADER:100" . PHP_EOL .
      "DATA:OFXSGML" . PHP_EOL .
      "VERSION:102" . PHP_EOL .
      "SECURITY:NONE" . PHP_EOL .
      "ENCODING:USASCII" . PHP_EOL .
      "CHARSET:1252" . PHP_EOL .
      "COMPRESSION:NONE" . PHP_EOL .
      "OLDFILEUID:NONE" . PHP_EOL .
      "NEWFILEUID:NONE" . PHP_EOL . PHP_EOL;
    $OFXReturn->content .= "<OFX>";
    $OFXReturn->content .= "<SIGNONMSGSRSV1><SONRS><STATUS><CODE>0<SEVERITY>INFO</STATUS><DTSERVER>" . date("YmdHis.u[O:T]") . "<LANGUAGE>ENG<FI><ORG>" . $orgName . "<FID>12345</FI></SONRS></SIGNONMSGSRSV1>";
    $OFXReturn->content .= "<BANKMSGSRSV1>" .
      "<STMTTRNRS>" .
      "<TRNUID>" .
      "<STATUS>" .
      "<CODE>0" .
      "<SEVERITY>INFO" .
      "</STATUS>";
    
    foreach ( $this->getFundTotals() as $fund ) {
      $OFXReturn->content .= "<STMTRS>" .
        "<CURDEF>USD" .
        "<BANKACCTFROM>" .
        "<BANKID>" . $orgName .
        "<ACCTID>" . $fund->Name .
        "<ACCTTYPE>SAVINGS" .
        "</BANKACCTFROM>";
      $OFXReturn->content .=
        "<STMTTRN>" .
        "<TRNTYPE>CREDIT" .
        "<DTPOSTED>" . $this->getDate("Ymd") .
        "<TRNAMT>" . $fund->Total .
        "<FITID>" .
        "<NAME>" . $this->getComment() .
        "<MEMO>" . $fund->Name .
        "</STMTTRN></STMTRS>";
    }

    $OFXReturn->content .= "</STMTTRNRS></BANKTRANLIST></OFX>";
    // Export file
    $OFXReturn->header = "Content-Disposition: attachment; filename=ChurchCRM-Deposit-" . $depID . "-" . date("Ymd-Gis") . ".ofx";
    return $OFXReturn;
  }
  
  public function getTotalAmount()
  {
    return $this->getVirtualColumn("totalAmount");
  }
  
  public function getTotalChecks()
  {
    $totalChecks = 0;
    foreach ( $this->getPledges() as $pledge)
    {
      if ($pledge->getMethod() == "CHECK")
      {
        $totalChecks += $pledge->getAmount();
      }
    }
    return $totalChecks;
  }
 
  public function getTotalCash()
  {
    $totalCash= 0;
    foreach ( $this->getPledges() as $pledge)
    {
      if ($pledge->getMethod() == "CASH")
      {
        $totalCash += $pledge->getAmount();
      }
    }
    return $totalCash;
  }
  
  public function getCountChecks()
  {
    $countChecks = 0;
    foreach ( $this->getPledges() as $pledge)
    {
      if ($pledge->getMethod() == "CHECK")
      {
        $countChecks += 1;
      }
    }
    return $countChecks;
  }
 
  public function getCountCash()
  {
    $countCash= 0;
    foreach ( $this->getPledges() as $pledge)
    {
      if ($pledge->getMethod() == "CASH")
      {
        $countCash += 1;
      }
    }
    return $countCash;
  }
  
  
  public function getFundTotals()
  {
     //there is probably a better way to do this with Propel ORM...
     $funds = array();
     foreach( $this->getPledges() as $pledge )
     {
       if ( $pledge->getFundid() && is_null($funds[ $pledge->getFundid() ]) )
       {
         $funds[ $pledge->getFundid() ] =  new \stdClass();
       }
      $funds[ $pledge->getFundid() ]->Total += $pledge->getAmount();
      $funds[ $pledge->getFundid() ]->Name = $pledge->getDonationFund()->getName();
    }
    return $funds;
  }
  
  public function getPledgesJoinAll(Criteria $criteria = null, ConnectionInterface $con = null, $joinBehavior = Criteria::LEFT_JOIN)
  {
      $query = ChildPledgeQuery::create(null, $criteria);
      $query->joinWith('Family', Criteria::RIGHT_JOIN);
      $query->joinWith('DonationFund', Criteria::RIGHT_JOIN);
      return $this->getPledges($query, $con);
  }
  
  public function runTransactions()
  {
    requireUserGroupMembership("bFinance");
    // Process all the transactions

    $pledges = $this->getPledges();

    if ($sElectronicTransactionProcessor == "AuthorizeNet") {
      // This file is generated by Composer
      require_once dirname(__FILE__) . '/../vendor/autoload.php';
      include("Include/AuthorizeNetConfig.php"); // Specific account information is in here
    }

    if ($sElectronicTransactionProcessor == "Vanco") {
      include "Include/vancowebservices.php";
      include "Include/VancoConfig.php";
    }

    foreach($pledges as $pledge) {
      
      if ($plg_aut_Cleared) // If this one already cleared do not submit it again.
        continue;

      if ($sElectronicTransactionProcessor == "AuthorizeNet") {
        $this->processAuthorizeNet($pledge);

      } else if ($sElectronicTransactionProcessor == "Vanco") {
        $this->processVanco();
      }
    }
  }
  function processAuthorizeNet(Pledge $pledge)
  {
    $merchantAuthentication = new AnetAPI\MerchantAuthenticationType();
    $merchantAuthentication->setName($sAUTHORIZENET_API_LOGIN_ID);
    $merchantAuthentication->setTransactionKey(sAUTHORIZENET_TRANSACTION_KEY);
    $refId = 'ref' . time();
    $paymentOne = new AnetAPI\PaymentType();
    if($pledge->getDeposit()->getType() == "Credit Card")
    {
     // Create the payment data for a credit card
      $creditCard = new AnetAPI\CreditCardType();
      $creditCard->setCardNumber("4111111111111111");
      $creditCard->setExpirationDate("1226");
      $creditCard->setCardCode("123");
      $paymentOne->setCreditCard($creditCard);
    }
    elseif($pledge->getDeposit()->getType() == "eGive")
    {
        // Create the payment data for a Bank Account
      $bankAccount = new AnetAPI\BankAccountType();
      //$bankAccount->setAccountType('CHECKING');
      $bankAccount->setEcheckType('WEB');
      $bankAccount->setRoutingNumber('121042882');
      $bankAccount->setAccountNumber('123456789123');
      $bankAccount->setNameOnAccount('Jane Doe');
      $bankAccount->setBankName('Bank of the Earth'); 
      $paymentOne->setBankAccount($bankAccount);
    }
    
    $transactionRequestType = new AnetAPI\TransactionRequestType();
    $transactionRequestType->setTransactionType("authCaptureTransaction");
    $transactionRequestType->setAmount($pledge->getAmount());
    $transactionRequestType->setPayment($paymentOne);
    
    $request = new AnetAPI\CreateTransactionRequest();
    $request->setMerchantAuthentication($merchantAuthentication);
    $request->setRefId( $refId);
    $request->setTransactionRequest( $transactionRequestType);
    $controller = new AnetController\CreateTransactionController($request);
    $response = $controller->executeWithApiResponse( \net\authorize\api\constants\ANetEnvironment::SANDBOX);
    if ($response != null)
    {
      $tresponse = $response->getTransactionResponse();
      if (($tresponse != null) && ($tresponse->getResponseCode()== \SampleCode\Constants::RESPONSE_OK) )   
      {
        echo  "Debit Bank Account APPROVED  :" . "\n";
        echo " Debit Bank Account AUTH CODE : " . $tresponse->getAuthCode() . "\n";
        echo " Debit Banlk Account TRANS ID  : " . $tresponse->getTransId() . "\n";
      }
      elseif (($tresponse != null) && ($tresponse->getResponseCode()=="2") )
      {
        echo  "Debit Bank Account ERROR : DECLINED" . "\n";
        $errorMessages = $tresponse->getErrors();
        echo  "Error : " . $errorMessages[0]->getErrorText() . "\n";
      }
      elseif (($tresponse != null) && ($tresponse->getResponseCode()=="4") )
      {
          echo  "Debit Bank Account ERROR: HELD FOR REVIEW:"  . "\n";
      }
      else
      {
          echo  "Debit Bank Account 3 response returned";
      }
    }
    else
    {
      echo  "Debit Bank Account Null response returned";
    }
    return $response;
  }
    
}
